{"ast":null,"code":"import{useState}from\"react\";import{AsyncPaginate}from\"react-select-async-paginate\";import{GEO_API_URL,geoApiOptions}from\"../../Api\";import{jsx as _jsx}from\"react/jsx-runtime\";const Search=_ref=>{let{onSearchChange}=_ref;const[search,setSearch]=useState(null);const loadOptions=async searchInputValue=>{try{const response=await fetch(\"\".concat(GEO_API_URL,\"/cities?minPopulation=1000000&namePrefix=\").concat(searchInputValue),geoApiOptions);const result=await response.json();return{options:result.data.map(city=>{return{value:\"\".concat(city.latitude,\" \").concat(city.longitude),label:\"\".concat(city.name,\", \").concat(city.countryCode)};})};}catch(error){console.error(error);}};const handleOnChange=searchData=>{setSearch(searchData);onSearchChange(searchData);};return/*#__PURE__*/_jsx(AsyncPaginate,{placeholder:\"Search for city\",debounceTimeout:600,value:search,onChange:handleOnChange,loadOptions:loadOptions});};export default Search;","map":{"version":3,"names":["useState","AsyncPaginate","GEO_API_URL","geoApiOptions","jsx","_jsx","Search","_ref","onSearchChange","search","setSearch","loadOptions","searchInputValue","response","fetch","concat","result","json","options","data","map","city","value","latitude","longitude","label","name","countryCode","error","console","handleOnChange","searchData","placeholder","debounceTimeout","onChange"],"sources":["/Users/kate.b/react-weather-app/src/components/search/search.js"],"sourcesContent":["import { useState } from \"react\";\nimport { AsyncPaginate } from \"react-select-async-paginate\";\nimport { GEO_API_URL, geoApiOptions } from \"../../Api\";\n\nconst Search = ({ onSearchChange }) => {\n  const [search, setSearch] = useState(null);\n\n  const loadOptions = async (searchInputValue) => {\n    try {\n      const response = await fetch(\n        `${GEO_API_URL}/cities?minPopulation=1000000&namePrefix=${searchInputValue}`,\n        geoApiOptions\n      );\n      const result = await response.json();\n\n      return {\n        options: result.data.map((city) => {\n          return {\n            value: `${city.latitude} ${city.longitude}`,\n            label: `${city.name}, ${city.countryCode}`,\n          };\n        }),\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleOnChange = (searchData) => {\n    setSearch(searchData);\n    onSearchChange(searchData);\n  };\n\n  return (\n    <AsyncPaginate\n      placeholder=\"Search for city\"\n      debounceTimeout={600}\n      value={search}\n      onChange={handleOnChange}\n      loadOptions={loadOptions}\n    />\n  );\n};\n\nexport default Search;\n"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,aAAa,KAAQ,6BAA6B,CAC3D,OAASC,WAAW,CAAEC,aAAa,KAAQ,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEvD,KAAM,CAAAC,MAAM,CAAGC,IAAA,EAAwB,IAAvB,CAAEC,cAAe,CAAC,CAAAD,IAAA,CAChC,KAAM,CAACE,MAAM,CAAEC,SAAS,CAAC,CAAGV,QAAQ,CAAC,IAAI,CAAC,CAE1C,KAAM,CAAAW,WAAW,CAAG,KAAO,CAAAC,gBAAgB,EAAK,CAC9C,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,IAAAC,MAAA,CACvBb,WAAW,8CAAAa,MAAA,CAA4CH,gBAAgB,EAC1ET,aACF,CAAC,CACD,KAAM,CAAAa,MAAM,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAEpC,MAAO,CACLC,OAAO,CAAEF,MAAM,CAACG,IAAI,CAACC,GAAG,CAAEC,IAAI,EAAK,CACjC,MAAO,CACLC,KAAK,IAAAP,MAAA,CAAKM,IAAI,CAACE,QAAQ,MAAAR,MAAA,CAAIM,IAAI,CAACG,SAAS,CAAE,CAC3CC,KAAK,IAAAV,MAAA,CAAKM,IAAI,CAACK,IAAI,OAAAX,MAAA,CAAKM,IAAI,CAACM,WAAW,CAC1C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAE,MAAOC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACtB,CACF,CAAC,CAED,KAAM,CAAAE,cAAc,CAAIC,UAAU,EAAK,CACrCrB,SAAS,CAACqB,UAAU,CAAC,CACrBvB,cAAc,CAACuB,UAAU,CAAC,CAC5B,CAAC,CAED,mBACE1B,IAAA,CAACJ,aAAa,EACZ+B,WAAW,CAAC,iBAAiB,CAC7BC,eAAe,CAAE,GAAI,CACrBX,KAAK,CAAEb,MAAO,CACdyB,QAAQ,CAAEJ,cAAe,CACzBnB,WAAW,CAAEA,WAAY,CAC1B,CAAC,CAEN,CAAC,CAED,cAAe,CAAAL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}